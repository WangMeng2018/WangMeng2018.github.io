<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows安装Mysql</title>
      <link href="/2019/09/10/Windows%E5%AE%89%E8%A3%85Mysql/"/>
      <url>/2019/09/10/Windows%E5%AE%89%E8%A3%85Mysql/</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载链接：<a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a><br>本机选择的是Mysql5.7.13 zip版本;  </p></li><li><p>解压mysql-5.7.13-winx64.zip，并移动到安装目录下；</p></li><li><p>添加系统环境变量path，内容为D:\MySQL\mysql-5.7.13-winx64 ;  </p></li><li><p>修改配置文件my-default.ini，添加内容：  </p><blockquote><p>basedir = D:\MySQL\mysql-5.7.13-winx64<br>datadir = D:\MySQL\mysql-5.7.13-winx64\data</p></blockquote></li><li><p>以管理员身份运行cmd，输入cd D:\MySQL\mysql-5.7.13-winx64\bin；</p></li><li><p>输入.\mysqld –initialize-insecure –user=mysql 回车;  </p></li><li><p>输入 .\mysqld install 回车;  </p></li><li><p>输入net start mysql 回车启动mysql服务  管理员权限;  </p></li><li><p>输入.\mysql -u root -p 回车登录mysql数据库，没有密码，直接回车;  </p></li><li><p>测试，输入show databases:  </p><img src="/2019/09/10/Windows安装Mysql/1.jpg" title="avatar">  </li></ol><p>输入quit，退出。  </p><ol start="11"><li>输入net stop mysql，停止mysql程序。</li></ol><p>参考链接:  </p><ul><li><a href="https://www.cnblogs.com/ayyl/p/5978418.html" target="_blank" rel="noopener">https://www.cnblogs.com/ayyl/p/5978418.html</a>  </li><li><a href="https://www.cnblogs.com/reyinever/p/8551977.html" target="_blank" rel="noopener">https://www.cnblogs.com/reyinever/p/8551977.html</a>  </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> Windows </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装Mysql</title>
      <link href="/2019/09/10/Ubuntu%E5%AE%89%E8%A3%85Mysql/"/>
      <url>/2019/09/10/Ubuntu%E5%AE%89%E8%A3%85Mysql/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker创建镜像</title>
      <link href="/2019/09/07/Docker%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
      <url>/2019/09/07/Docker%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>Docker创建镜像有两种方式:  </p><ul><li>从已经创建镜像的容器中更新镜像，并且提交这个镜像；</li><li>使用Dockerfile指令来创建镜像。</li></ul><h1 id="一、已有镜像更新"><a href="#一、已有镜像更新" class="headerlink" title="一、已有镜像更新"></a>一、已有镜像更新</h1><ol><li><p>在更新镜像之前，先用镜像创建一个容器；  </p><blockquote><p>docker run -t -i ubuntu:18.04  /bin/bash</p></blockquote></li><li><p>执行上述命令之后，会返回一个Container_ID；可以在伪终端中进行修改，比如：apt-get update； </p></li><li><p>再用exit退出容器；  </p></li><li><p>通过docker commit这个命令来提交修改后的容器副本； </p><blockquote><p>docker   commit   -m=”description”   -a=”author”   Container_ID   author/image:tag</p></blockquote></li><li><p>docker images 就可以查看到这个镜像。</p></li></ol><h1 id="Dockerfile创建镜像"><a href="#Dockerfile创建镜像" class="headerlink" title="Dockerfile创建镜像"></a>Dockerfile创建镜像</h1><ol><li><p>首先需要创建一个Dockerfile文件，包含一组指令，而且每一个指令的前缀必须大写。比如官网示例中填入以下内容：  </p><img src="/2019/09/07/Docker创建镜像/1.jpg" title="avatar"><p>FROM 指定使用的镜像源; RUN  告诉docker在镜像中执行的命令。<br>要成功实现该示例，这里还差两个文件：requirement.txt 和 app.py。  </p><img src="/2019/09/07/Docker创建镜像/2.jpg" title="avatar"><img src="/2019/09/07/Docker创建镜像/3.jpg" title="avatar">  </li><li><p>准备工作完成之后，可以使用docker build命令构建镜像；  </p><blockquote><p>docker   build   –tag=ImageName   .  </p><p>说明：  </p><ul><li>命令最后一个”.”，用来指定创建镜像的资源目录，即Dockerfile的目录。  </li><li>-t指定创建的镜像名。</li></ul></blockquote></li><li><p>docker images 查看创建的镜像信息；</p></li><li><p>启动容器；</p><blockquote><p>docker run -p 4000:80 ImageName</p></blockquote><img src="/2019/09/07/Docker创建镜像/4.jpg" title="avatar"></li><li><p>停止容器运行；</p><blockquote><p> docker container stop Conatiner_ID</p></blockquote></li><li><p>使用docker tag命令为镜像添加一个新的标签。</p><blockquote><p> docker tag Container_ID  ImageName:TagName</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令</title>
      <link href="/2019/09/07/Docker%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/09/07/Docker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><ol><li>docker run hello-world 启动hello-world容器镜像<br> docker run -t -i ubuntu:18.04 /bin/bash   运行交互式容器<br> -t : 在新容器内指定一个伪终端或者终端<br>  -i : 通过容器内的标准输入STDIN进行交互<br> docker run -d hello-world  运行容器的后台模式<br> -d : 分离模式，在后台运行</li></ol><ol start="2"><li><p>docker –version或者docker version  查看版本信息</p></li><li><p>docker images或者docker image ls   罗列下载的容器镜像信息</p></li><li><p>docker container ls  查看正在运行的容器实例<br> docker container ls -all  查看所有容器实例</p></li><li><p>docker logs Container_ID   查看容器的标准输出</p></li><li><p>docker ps  查看正在运行的容器实例</p></li><li><p>docker stop Container_ID 或者 Ctrl+D 停止容器的运行</p></li><li><p>docker pull Image_name    载入镜像</p></li><li><p>docker port Container_ID   查看指定容器的端口映射<br> -p 主机端口/容器端口   将容器端口映射到主机端口</p></li><li><p>docker top Container_ID   查看容器内部运行的进程</p></li><li><p>docker rm 移除不需要的Docker镜像</p></li><li><p>docker search Name  搜索镜像</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Push Docker镜像到远程仓库</title>
      <link href="/2019/09/06/Push-Docker%E9%95%9C%E5%83%8F%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2019/09/06/Push-Docker%E9%95%9C%E5%83%8F%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>将本地Docker镜像Push到远程仓库，命令如下：  </p><blockquote><p>docker tag local-image:tagname new-repo:tagname<br>docker push new-repo:tagname</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装Docker</title>
      <link href="/2019/09/06/Mac%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2019/09/06/Mac%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<p>Mac上安装Docker比较简单，直接从<a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">官网</a>下载安装文件，再安装就可以了。  </p><p>查看是否安装成功：</p><blockquote><p>docker –version</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装Docker</title>
      <link href="/2019/09/04/Ubuntu%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2019/09/04/Ubuntu%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<ol><li>从Docker仓库下载安装，首先确保能够访问Docker仓库地址:<a href="https://download.docker.com/linux/ubuntu，" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu，</a> 如果能够访问，按照下面的操作步骤进行安装。  <blockquote><p>sudo apt update<br>sudo apt install apt-transport-https ca-certificates curl software-properties-common</p></blockquote></li><li>在/etc/apt/sources.list.d/docker.list文件中添加下面内容；  <blockquote><p>deb [arch=amd64] <a href="https://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu</a> bionic stable</p></blockquote></li><li>添加秘钥；  <blockquote><p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</p></blockquote></li><li>安装docker-ce；  <blockquote><p>sudo apt install docker-ce</p></blockquote></li><li>查看是否安装成功。  <blockquote><p>docker –version<br>输出结果： Docker version 19.03.2, build 6a30dfc</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode远程连接开发</title>
      <link href="/2019/09/02/VSCode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%BC%80%E5%8F%91/"/>
      <url>/2019/09/02/VSCode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>说明： 示例是Mac上的VSCode连接远程Ubuntu服务器。</p><h2 id="一、-服务器配置"><a href="#一、-服务器配置" class="headerlink" title="一、 服务器配置"></a>一、 服务器配置</h2><ol><li>首先，给Ubuntu安装openssh-server；  <blockquote><p>sudo apt-get install openssh-server</p></blockquote></li><li>其次，启动ssh；  <blockquote><p>sudo service ssh start</p></blockquote></li><li>检查ssh是否开启。<blockquote><p>ps -e | grep ssh</p></blockquote></li></ol><h2 id="二、-本地配置"><a href="#二、-本地配置" class="headerlink" title="二、 本地配置"></a>二、 本地配置</h2><ol><li>Mac本身自带了ssh，不必安装；  </li><li>查看是否存在ssh密钥: ~/.ssh/id_rsa_pub；  </li><li>不存在的话，输入命令： ssh-keygen -t rsa -b 4096 ，生成两个文件；  <img src="/2019/09/02/VSCode远程连接开发/key.jpg" title="avatar"></li><li>将本地的公共密钥发送到服务器。  <blockquote><p>ssh-copy-id <a href="mailto:wangmeng@10.61.3.212" target="_blank" rel="noopener">wangmeng@10.61.3.212</a>  </p></blockquote></li></ol><h2 id="三、-VSCode配置"><a href="#三、-VSCode配置" class="headerlink" title="三、 VSCode配置"></a>三、 VSCode配置</h2><ol><li>首先安装VSCode Remote SSH，安装完左侧会显示新图标；  </li><li>点击CONNECTIONS后面的设置图标，再点击第一项进行配置； <img src="/2019/09/02/VSCode远程连接开发/1.jpg" title="avatar"></li><li>设置连接名、服务器地址、服务器上的用户名。  <img src="/2019/09/02/VSCode远程连接开发/2.jpg" title="avatar"><img src="/2019/09/02/VSCode远程连接开发/3.jpg" title="avatar"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用conda安装Python模块</title>
      <link href="/2019/09/02/%E4%BD%BF%E7%94%A8conda%E5%AE%89%E8%A3%85Python%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/09/02/%E4%BD%BF%E7%94%A8conda%E5%AE%89%E8%A3%85Python%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>问题：在终端中pip成功安装的模块，在<em>Jupyter-Notebook</em>中<em>import</em>失败，原因在于终端和Jupyter-Notebook使用的Python内核位置不同。  </p><p>如何解决：在Anaconda的bin目录下，使用pip重新安装，conda list查看是否安装成功。  </p><img src="/2019/09/02/使用conda安装Python模块/eg.jpg" title="avatar">]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中join问题</title>
      <link href="/2019/09/02/Python%E4%B8%ADjoin%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/02/Python%E4%B8%ADjoin%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>以<em>‘ ‘.join()</em>的方式将列表转为字符串，要求list中的元素都是字符串，否则需要<em>map(str, list)</em>进行转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;, &#123;<span class="string">"b"</span>:<span class="number">2</span>&#125;]  </span><br><span class="line"><span class="string">','</span>.join(map(str, a))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu SSR</title>
      <link href="/2019/09/01/Ubuntu-SSR/"/>
      <url>/2019/09/01/Ubuntu-SSR/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu安装ssr客户端"><a href="#Ubuntu安装ssr客户端" class="headerlink" title="Ubuntu安装ssr客户端"></a>Ubuntu安装ssr客户端</h2><blockquote><ul><li>wget <a href="http://www.djangoz.com/ssr" target="_blank" rel="noopener">http://www.djangoz.com/ssr</a>  </li><li>sudo mv ssr /usr/local/bin  </li><li>sudo chmod 766 /usr/local/bin/ssr  </li><li>ssr install  </li><li>ssr config  </li></ul></blockquote><p>最后一步ssr config，将找的有效节点信息的配置导入，比如用下图中的内容替换config中的内容。<br>有效节点可以在youtube吾爱分享频道、yassuo.xyz、woocloud.online等等的站点获取。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"jp1.ssrnode.top"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">61536</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"8ELIWb"</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"rc4-md5"</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">"3027117564.microsoft.com"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_aes128_sha1"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">"17564:7vdNqp"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有git，需要安装： <em>sudo apt-get install git</em></p><h2 id="Ubuntu代理设置"><a href="#Ubuntu代理设置" class="headerlink" title="Ubuntu代理设置"></a>Ubuntu代理设置</h2><p>Ubuntu与Mac和Windows不同，浏览器需要手动设置代理。  </p><ol><li>首先安装SwitchyOmega插件，如果安装Google拒绝安装离线插件，可以先将crx文件改成zip或者rar文件，再加载已解压文件，可以成功安装。  </li><li>安装成功后，再进行配置。新建情景模式或者直接在默认的proxy中按图所示进行修改，主要是代理协议、服务器和代理端口。<img src="/2019/09/01/Ubuntu-SSR/proxy.jpg" title="avatar"></li><li>可以安装一些规则，填完规则列表格式和网址之后，点击立即更新情景模式。  <img src="/2019/09/01/Ubuntu-SSR/principle.jpg" title="avatar"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac配置Tunnelblick</title>
      <link href="/2019/09/01/Mac%E9%85%8D%E7%BD%AETunnelblick/"/>
      <url>/2019/09/01/Mac%E9%85%8D%E7%BD%AETunnelblick/</url>
      
        <content type="html"><![CDATA[<ol><li>Tunnelblick破解版安装;</li><li>安装之后，点击Tunnelblick，选择我没有配置文件，为我生成配置文件;</li><li>打开自动生成的文件夹，打开config.ovpn;</li><li>配置文件设置：将OpenVPN解压，获取config文件夹，将其中的client.ovpn中的内容复制到config.ovpn中，同时将config文件夹中的其他文件复制到自动生成的文件夹中;</li><li>将自动生成的文件夹改名为trec6.tblk;</li><li>点击右上角的tunnelblick图标，选择VPN详情，将trec6.tblk拖到配置栏中。或者双击进行配置。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
